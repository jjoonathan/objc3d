/**
 *  @file O3GeneratedVertexDataSource.h
 *  @license MIT License (see LICENSE.txt)
 *  @date 1/21/07.
 *  @author Jonathan deWerd
 *  @copyright Copyright 2007 Jonathan deWerd. This file is distributed under the MIT license (see accompanying file for details).
 */
#import "O3VertexFormats.h"
@class O3Camera;

@interface O3GeneratedVertexDataSource : NSObject {
	O3Camera* mCamera; ///<The camera that the receiver dynamically gets the texgen planes from
#ifdef __cplusplus
	Plane mPlanes[4]; ///<The texgen planes, in STRQ order
#else
	real mPlaneCoords[16];
#endif
	BOOL  mPlanesEnabled[4]; ///<Weather each plane is enabled or disabled.
	BOOL  mEyePlanes[4]; ///<Weather each plane is postmultiplied by the current modelview matrix
	BOOL mBound;	///<YES if the receiver is currently bound
	O3VertexDataType mType; ///<The type of data provided by the object (
	GLenum mMode; ///<The texture generation mode for glTexGen
}
//Init
- (id)initWithType:(O3VertexDataType)type camera:(O3Camera*)camera;	///<Initialize the receiver with \e type, generating coordinates from \e camera's perspective
#ifdef __cplusplus
- (id)initWithType:(O3VertexDataType)type matrix:(O3Mat4x4d)mat; ///<Initialize the receiver with \e type and generate the planes based on the matrix \e mat
- (id)initWithType:(O3VertexDataType)type mode:(GLenum)mode sPlane:(const Plane*)s tPlane:(const Plane*)t rPlane:(const Plane*)r qPlane:(const Plane*)q;
#endif

//Setters
#ifdef __cplusplus
- (void)setPlane:(Plane)plane forCoord:(GLenum)coord eyeRelative:(BOOL)relativeToCamera;	///<Manually set the plane for coord \e coord to \e plane. If \e relativeToCamera is YES, the plane is postmultiplied by the current modelview matrix
- (void)setPlanesFromMatrix:(O3Mat4x4d)mat; ///<Sets the texture generation as projective generation from the projection matrix \e mat.
#endif
- (void)setPlanesFromCamera:(O3Camera*)camera; ///<Sets the receiver's planes from \e camera once (won't update if the camera does).
- (void)setCamera:(O3Camera*)camera; ///<Sets the camera that the receiver will dynamically get the texgen planes from (typically for projective texturing).
- (void)setMode:(GLenum)mode; ///<Changes the way texture coords are generated. Must be a parameter passable to glTexGen
- (void)setType:(O3VertexDataType)type; ///<Sets the type of coordinate generated by the receiver
- (void)setPlaneForCoord:(GLenum)coord enabled:(BOOL)enabled; ///<Enables or disables the plane for \e coord

//Accessors
#ifdef __cplusplus
- (Plane)planeForCoord:(GLenum)coord; ///<Gets the plane for \e coord
#endif
- (GLenum)mode; ///<Returns the mode of texture generation
- (O3Camera*)camera;	///<Gets the camera that the receiver dynamically gets the texgen planes from
- (O3VertexDataType)type; ///<The type of coordinate generated by the receiver
- (BOOL)planeEnabledForCoord:(GLenum)coord; ///<Returns weather \e coord's plane is enabled

//Use
- (void)bind;	///<Bind as a texture coord data source
- (void)unbind;	///<Unbind as a texture coord data source
@end
